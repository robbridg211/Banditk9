/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { MatIconRegistry } from '@angular/material';
import { DomSanitizer } from '@angular/platform-browser';
/**
 * @record
 */
export function IconsConfig() { }
if (false) {
    /** @type {?} */
    IconsConfig.prototype.keys;
    /** @type {?} */
    IconsConfig.prototype.path;
}
export class IconImportService {
    /**
     * @param {?} iconRegistry
     * @param {?} domSanitizer
     * @param {?} icons
     */
    constructor(iconRegistry, domSanitizer, icons) {
        this.iconRegistry = iconRegistry;
        this.domSanitizer = domSanitizer;
        this.icons = icons;
    }
    /**
     * @return {?}
     */
    register() {
        for (const icon of this.icons.keys) {
            this.iconRegistry.addSvgIcon(icon, this.domSanitizer.bypassSecurityTrustResourceUrl(`${this.icons.path}/baseline-${icon}-24px.svg`));
        }
    }
}
IconImportService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
IconImportService.ctorParameters = () => [
    { type: MatIconRegistry },
    { type: DomSanitizer },
    { type: undefined, decorators: [{ type: Inject, args: ['icons',] }] }
];
if (false) {
    /** @type {?} */
    IconImportService.prototype.icons;
    /** @type {?} */
    IconImportService.prototype.iconRegistry;
    /** @type {?} */
    IconImportService.prototype.domSanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1pbXBvcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdC1pY29uLWltcG9ydC8iLCJzb3VyY2VzIjpbImxpYi9pY29uLWltcG9ydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7O0FBRXpELGlDQUdDOzs7SUFGQywyQkFBZTs7SUFDZiwyQkFBYTs7QUFJZixNQUFNLE9BQU8saUJBQWlCOzs7Ozs7SUFHNUIsWUFDVSxZQUE2QixFQUM3QixZQUEwQixFQUNqQixLQUFrQjtRQUYzQixpQkFBWSxHQUFaLFlBQVksQ0FBaUI7UUFDN0IsaUJBQVksR0FBWixZQUFZLENBQWM7UUFHbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUMxQixJQUFJLEVBQ0osSUFBSSxDQUFDLFlBQVksQ0FBQyw4QkFBOEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxhQUFhLElBQUksV0FBVyxDQUFDLENBQ2pHLENBQUM7U0FDSDtJQUNILENBQUM7OztZQW5CRixVQUFVOzs7O1lBUkYsZUFBZTtZQUNmLFlBQVk7NENBY2hCLE1BQU0sU0FBQyxPQUFPOzs7O0lBTGpCLGtDQUFtQjs7SUFHakIseUNBQXFDOztJQUNyQyx5Q0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWF0SWNvblJlZ2lzdHJ5IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSWNvbnNDb25maWcge1xyXG4gIGtleXM6IHN0cmluZ1tdO1xyXG4gIHBhdGg6IHN0cmluZztcclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSWNvbkltcG9ydFNlcnZpY2Uge1xyXG4gIGljb25zOiBJY29uc0NvbmZpZztcclxuXHJcbiAgY29uc3RydWN0b3IgKFxyXG4gICAgcHJpdmF0ZSBpY29uUmVnaXN0cnk6IE1hdEljb25SZWdpc3RyeSxcclxuICAgIHByaXZhdGUgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsXHJcbiAgICBASW5qZWN0KCdpY29ucycpIGljb25zOiBJY29uc0NvbmZpZ1xyXG4gICkge1xyXG4gICAgdGhpcy5pY29ucyA9IGljb25zO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXIoKSB7XHJcbiAgICBmb3IgKGNvbnN0IGljb24gb2YgdGhpcy5pY29ucy5rZXlzKSB7XHJcbiAgICAgIHRoaXMuaWNvblJlZ2lzdHJ5LmFkZFN2Z0ljb24oXHJcbiAgICAgICAgaWNvbixcclxuICAgICAgICB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwoYCR7dGhpcy5pY29ucy5wYXRofS9iYXNlbGluZS0ke2ljb259LTI0cHguc3ZnYClcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19
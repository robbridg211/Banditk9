import { __values } from 'tslib';
import { Injectable, Inject, NgModule } from '@angular/core';
import { MatIconRegistry } from '@angular/material';
import { DomSanitizer } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var IconImportService = /** @class */ (function () {
    function IconImportService(iconRegistry, domSanitizer, icons) {
        this.iconRegistry = iconRegistry;
        this.domSanitizer = domSanitizer;
        this.icons = icons;
    }
    /**
     * @return {?}
     */
    IconImportService.prototype.register = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        try {
            for (var _b = __values(this.icons.keys), _c = _b.next(); !_c.done; _c = _b.next()) {
                var icon = _c.value;
                this.iconRegistry.addSvgIcon(icon, this.domSanitizer.bypassSecurityTrustResourceUrl(this.icons.path + "/baseline-" + icon + "-24px.svg"));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    IconImportService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    IconImportService.ctorParameters = function () { return [
        { type: MatIconRegistry },
        { type: DomSanitizer },
        { type: undefined, decorators: [{ type: Inject, args: ['icons',] }] }
    ]; };
    return IconImportService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var IconImportModule = /** @class */ (function () {
    function IconImportModule() {
    }
    /**
     * @param {?} keys
     * @param {?} path
     * @return {?}
     */
    IconImportModule.forRoot = /**
     * @param {?} keys
     * @param {?} path
     * @return {?}
     */
    function (keys, path) {
        return {
            ngModule: IconImportModule,
            providers: [
                IconImportService,
                { provide: 'icons', useValue: { keys: keys, path: path } }
            ]
        };
    };
    IconImportModule.decorators = [
        { type: NgModule, args: [{
                    imports: [HttpClientModule]
                },] },
    ];
    return IconImportModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { IconImportService, IconImportModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWljb24taW1wb3J0LmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9tYXQtaWNvbi1pbXBvcnQvbGliL2ljb24taW1wb3J0LnNlcnZpY2UudHMiLCJuZzovL21hdC1pY29uLWltcG9ydC9saWIvaWNvbi1pbXBvcnQubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNYXRJY29uUmVnaXN0cnkgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJY29uc0NvbmZpZyB7XHJcbiAga2V5czogc3RyaW5nW107XHJcbiAgcGF0aDogc3RyaW5nO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBJY29uSW1wb3J0U2VydmljZSB7XHJcbiAgaWNvbnM6IEljb25zQ29uZmlnO1xyXG5cclxuICBjb25zdHJ1Y3RvciAoXHJcbiAgICBwcml2YXRlIGljb25SZWdpc3RyeTogTWF0SWNvblJlZ2lzdHJ5LFxyXG4gICAgcHJpdmF0ZSBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcixcclxuICAgIEBJbmplY3QoJ2ljb25zJykgaWNvbnM6IEljb25zQ29uZmlnXHJcbiAgKSB7XHJcbiAgICB0aGlzLmljb25zID0gaWNvbnM7XHJcbiAgfVxyXG5cclxuICByZWdpc3RlcigpIHtcclxuICAgIGZvciAoY29uc3QgaWNvbiBvZiB0aGlzLmljb25zLmtleXMpIHtcclxuICAgICAgdGhpcy5pY29uUmVnaXN0cnkuYWRkU3ZnSWNvbihcclxuICAgICAgICBpY29uLFxyXG4gICAgICAgIHRoaXMuZG9tU2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybChgJHt0aGlzLmljb25zLnBhdGh9L2Jhc2VsaW5lLSR7aWNvbn0tMjRweC5zdmdgKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJY29uSW1wb3J0U2VydmljZSB9IGZyb20gJy4vaWNvbi1pbXBvcnQuc2VydmljZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFsgSHR0cENsaWVudE1vZHVsZSBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJY29uSW1wb3J0TW9kdWxlIHtcclxuICBzdGF0aWMgZm9yUm9vdChrZXlzOiBzdHJpbmdbXSwgcGF0aDogc3RyaW5nKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogSWNvbkltcG9ydE1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgSWNvbkltcG9ydFNlcnZpY2UsXHJcbiAgICAgICAgeyBwcm92aWRlOiAnaWNvbnMnLCB1c2VWYWx1ZTogeyBrZXlzLCBwYXRoIH0gfVxyXG4gICAgICBdXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsidHNsaWJfMS5fX3ZhbHVlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFhRSwyQkFDVSxZQUE2QixFQUM3QixZQUEwQixFQUNqQixLQUFrQjtRQUYzQixpQkFBWSxHQUFaLFlBQVksQ0FBaUI7UUFDN0IsaUJBQVksR0FBWixZQUFZLENBQWM7UUFHbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7S0FDcEI7Ozs7SUFFRCxvQ0FBUTs7O0lBQVI7OztZQUNFLEtBQW1CLElBQUEsS0FBQUEsU0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQSxnQkFBQSw0QkFBRTtnQkFBL0IsSUFBTSxJQUFJLFdBQUE7Z0JBQ2IsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQzFCLElBQUksRUFDSixJQUFJLENBQUMsWUFBWSxDQUFDLDhCQUE4QixDQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxrQkFBYSxJQUFJLGNBQVcsQ0FBQyxDQUNqRyxDQUFDO2FBQ0g7Ozs7Ozs7OztLQUNGOztnQkFuQkYsVUFBVTs7OztnQkFSRixlQUFlO2dCQUNmLFlBQVk7Z0RBY2hCLE1BQU0sU0FBQyxPQUFPOztJQWFuQix3QkFBQztDQUFBOzs7Ozs7QUM3QkQ7SUFJQTtLQWFDOzs7Ozs7SUFUUSx3QkFBTzs7Ozs7SUFBZCxVQUFlLElBQWMsRUFBRSxJQUFZO1FBQ3pDLE9BQU87WUFDTCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLFNBQVMsRUFBRTtnQkFDVCxpQkFBaUI7Z0JBQ2pCLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxJQUFJLE1BQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxFQUFFO2FBQy9DO1NBQ0YsQ0FBQztLQUNIOztnQkFaRixRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUUsZ0JBQWdCLENBQUU7aUJBQzlCOztJQVdELHVCQUFDO0NBQUE7Ozs7Ozs7Ozs7Ozs7OyJ9